// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id
  name      String
  tel       String?
  image     String?
  twitterId String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  posts     Post[]
  likes     Like[]
  characters Character[] // ユーザーのキャラクター一覧
  
  // フォロー関係
  following Follow[] @relation("UserFollowing")
  followers Follow[] @relation("UserFollowers")
  
  // 通知関係
  notifications Notification[] @relation("UserNotifications")
  notificationActions Notification[] @relation("UserNotificationActions")
}

model Post {
  id        Int       @id @default(autoincrement())
  title     String?
  content   String?
  images    String? // JSON string of image URLs array
  url       String? // URL欄（他人からは隠蔽される）
  published Boolean   @default(true)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime? // 論理削除用
  author    User?     @relation(fields: [authorId], references: [id])
  authorId  String?
  likes     Like[]
  
  // キャラクター関係
  character   Character? @relation(fields: [characterId], references: [id])
  characterId Int?
  
  // リプライ関係
  replyToId Int?      // リプライ先のPost ID
  replyTo   Post?     @relation("PostReplies", fields: [replyToId], references: [id])
  replies   Post[]    @relation("PostReplies")
  
  // 通知関係
  notifications Notification[]
}

model Like {
  id     Int  @id @default(autoincrement())
  user   User @relation(fields: [userId], references: [id])
  userId String
  post   Post @relation(fields: [postId], references: [id])
  postId Int
  createdAt DateTime @default(now())

  @@unique([userId, postId])
}

model Follow {
  id          Int      @id @default(autoincrement())
  follower    User     @relation("UserFollowing", fields: [followerId], references: [id])
  followerId  String
  following   User     @relation("UserFollowers", fields: [followingId], references: [id])
  followingId String
  createdAt   DateTime @default(now())

  @@unique([followerId, followingId])
}

model Character {
  id         Int      @id @default(autoincrement())
  name       String
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  posts      Post[]   // このキャラクターが使用された投稿
  postsCount Int      @default(0) // 使用回数のカウント
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([userId, name]) // ユーザーごとにキャラクター名は一意
}

model Notification {
  id        Int      @id @default(autoincrement())
  type      String   // 'like', 'reply', 'follow'
  message   String?  // 通知メッセージ
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // 通知を受け取るユーザー
  user      User     @relation("UserNotifications", fields: [userId], references: [id])
  userId    String
  
  // 通知を発生させたユーザー
  actor     User     @relation("UserNotificationActions", fields: [actorId], references: [id])
  actorId   String
  
  // 関連する投稿（オプション）
  post      Post?    @relation(fields: [postId], references: [id])
  postId    Int?
  
  @@index([userId, read])
  @@index([userId, createdAt])
}
